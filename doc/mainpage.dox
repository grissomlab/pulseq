/**
  \mainpage Introduction

Pulseq project is an open source framework for the development and execution of magnetic resonance (MR) pulse sequences for imaging and spectroscopy. In summary, with Pulseq MR sequences can be programmed directly in Matlab, Octave or Python, exported to the Pulseq file format and executed on real hardware.

<img src="overview.png">

There are two main flavours of Pulseq: **Matlab/Octave Pulseq Toolbox**, available under the source part of this repository, and **Python Pulseq Toolbox**, a.k.a. PyPulseq, which is maintained in a separate repository (see below).

## Pulseq file format

A central contribution of this project is an **open file format** to compactly
describe MR sequences suitable for execution on an MRI scanner. The detailed file specification
can be obtained here: <a href="specification.pdf">`specification.pdf`</a> See also Docs tab for further information.

## Source code repository

The source code in this repository provides the Pulseq toolbox and example implementations of several MR pulse sequences in Pulseq format. The code is
divided into <a href="https://github.com/pulseq/pulseq/tree/master/matlab">Matlab/Octave</a> and <a href="https://github.com/pulseq/pulseq/tree/master/src">C++</a> sections. The C++ part contains a standalone programm capable of loading Pulseq files and displaying basic statistics about the nimber of blocks, number of pulses, etc. It is potentially interesting to those seeking to implement their own Pulseq interpreter for a particular scanner. 

### Matlab/Octave sequence examples

-  <a href="writeGradientEcho.html">Gradient echo sequence</a>
-  <a href="writeGradientEcho3D.html">3D Gradient echo sequence</a>
-  <a href="writeEpi.html">EPI sequence</a>
-  <a href="writeEpiRS.html">EPI sequence with ramp sampling</a>
-  <a href="writeEpiSpinEcho.html">SE-EPI sequence</a>
-  <a href="writeHASTE.html">HASTE sequence</a>
-  <a href="writeRadialGradientEcho.html">Radial Gradient echo sequence</a>
-  <a href="writeSelectiveRf.html">Create a 2D selective RF pulse</a>
-  <a href="writeSpiral.html">Spiral sequence</a>
-  <a href="writeTrufi.html">Trufi sequence</a>
-  <a href="writeTSE.html">Turbo spin echo sequence</a>
-  <a href="writeUTE.html">UTE sequence</a>
-  <a href="writeUTE_rs.html">UTE sequence with ramp sampling</a>

## Scanner implementations

Currently, Pulseq sequences can be executed on the following platforms. Please <a href="mailto:pulseq.mr@uniklinik-freiburg.de">contact us</a> if
you would like to run open and flexible sequences at your institution.

- <a href="#" onclick="location.href='mai'+'lto:'+'pul'+'se'+'q.m'+'r@'+'uni'+'kl'+'ini'+'k-'+'fre'+'ib'+'urg'+'.d'+'e'; return false;">Siemens</a>
- <a href="https://toppemri.github.io">GE</a>
- <a href="https://github.com/pulseq/bruker_interpreter">Bruker (out-of-date, discontinued)</a>
- <a href="https://github.com/lcbMGH/ocra-pulseq">OCRA</a>
- <a href="https://github.com/lcbMGH/flocra-pulseq">FLOCRA</a>

Additionally, there are two implementations of the *Philips interpreter* published in the ISMRM 2024 proceedings: 
<a href="https://submissions.mirasmart.com/ISMRM2024/Handlers/ViewTeaser.ashx?esbpgm=3115_3243"> #3243 </a>
and 
<a href="https://submissions.mirasmart.com/ISMRM2024/Handlers/ViewTeaser.ashx?esbpgm=3558_3251"> #3251 </a>
. Please contact the authors if ypu are interested in receiving one of these interpreters.

## Download source code

### Matlab/Octave 

Both Matlab/Octave and C++ source code is available here: https://github.com/pulseq/pulseq.
Alternatively, you may consider cloning the git repository directly:

    git clone git@github.com:pulseq/pulseq.git

### Python 

<a href="https://github.com/imr-framework/pypulseq">PyPulseq</a> is an alternative implementaton of the Pulseq sequence toolbox in Python, with a very similar syntax and functionality, originally implemented by Sairam Geethanath and Keerthi Ravi and maintained by an active developer community. It can be clonned from the GutHub site or installed directly via pip. See <a href="https://github.com/imr-framework/pypulseq">PyPulseq</a> GitHub Repository</a> for more details. 

## Supported by

<img src="nih_logo_horizontal.png"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src="eu_logo_horizontal.png">  

*/
